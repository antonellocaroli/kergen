#!/usr/bin/python
import subprocess
import glob
import os

class Device:
    def get_kernel_option(self):
        """Searches the kernel sources for a config option
        based on a known module name"""
        module_with_hypens = self.module.replace('_','-')
        module_with_underscores = self.module.replace('-','_')
        grep_command = ('grep -Ri --include Makefile " {}\.o" '
            '/usr/src/linux/|grep CONFIG_ || grep -Ri --include '
            'Makefile " {}\.o" /usr/src/linux/|grep CONFIG_ || true')\
            .format(module_with_hypens, module_with_underscores)
        grep_results = subprocess.check_output(
            grep_command, shell=True, universal_newlines=True)
        if grep_results:
            kernel_option = grep_results[
                grep_results.rfind('(')+1:grep_results.rfind(')')]
        else:
            kernel_option = None
        return kernel_option

    def get_options_from_db(self, devices_database):
        """Finds device matches from a devices_database
        and uses them to get kernel config options."""
        options = set()
        for db_device in devices_database:
            if self.compare_to(db_device):
                option = db_device.get_kernel_option()
                if option:
                    options.add(option)
        return options


class PCIDevice(Device):
    def __init__(self, modalias, module=''):
        self.modalias = modalias.replace('*','').replace('pci:','')
        self.module = module
        self.vendor = self.get_vendor_from_modalias()
        self.device = self.get_device_from_modalias()
        self.subvendor = self.get_subvendor_from_modalias()
        self.subdevice = self.get_subdevice_from_modalias()
        self.bus_class = self.get_bus_class_from_modalias()
        self.bus_subclass = self.get_bus_subclass_from_modalias()
        self.interface = self.get_interface_from_modalias()

    def get_vendor_from_modalias(self):
        return self.modalias[self.modalias.find('v')+1:self.modalias.find('d')]

    def get_device_from_modalias(self):
        return self.modalias[
            self.modalias.find('d')+1:self.modalias.find('sv')]

    def get_subvendor_from_modalias(self):
        return self.modalias[
            self.modalias.find('sv')+2:self.modalias.find('sd')]

    def get_subdevice_from_modalias(self):
        return self.modalias[
            self.modalias.find('sd')+2:self.modalias.find('bc')]

    def get_bus_class_from_modalias(self):
        return self.modalias[
            self.modalias.find('bc')+2:self.modalias.find('sc')]

    def get_bus_subclass_from_modalias(self):
        return self.modalias[
            self.modalias.find('sc')+2:self.modalias.find('i')]

    def get_interface_from_modalias(self):
        return self.modalias[self.modalias.find('i')+1:]

    def compare_to(self, db_device):
        """Checks if db_device is referring to the same hardware device.
        Useful because db_device will also have
        the module attribute available."""
        return db_device.vendor in self.vendor \
           and db_device.device in self.device \
           and db_device.subvendor in self.subvendor \
           and db_device.subdevice in self.subdevice \
           and db_device.bus_class in self.bus_class \
           and db_device.bus_subclass in self.bus_subclass \
           and db_device.interface in self.interface


class USBDevice(Device):
    def __init__(self, modalias, module=''):
        self.modalias = modalias.replace('*','').replace('usb:','')
        self.module = module
        self.device_vendor = self.get_device_vendor()
        self.device_product = self.get_device_product()
        self.bcdevice = self.get_bcdevice()
        self.device_class = self.get_device_class()
        self.device_subclass = self.get_device_subclass()
        self.device_protocol = self.get_device_protocol()
        self.interface_class = self.get_interface_class()
        self.interface_subclass = self.get_interface_subclass()
        self.interface_protocol = self.get_interface_protocol()

    def get_device_vendor(self):
        return self.modalias[self.modalias.find('v')+1:self.modalias.find('p')]

    def get_device_product(self):
        return self.modalias[self.modalias.find('p')+1:self.modalias.find('d')]

    def get_bcdevice(self):
        return self.modalias[
            self.modalias.find('d')+1:self.modalias.find('dc')]

    def get_device_class(self):
        return self.modalias[
            self.modalias.find('dc')+2:self.modalias.find('dsc')]

    def get_device_subclass(self):
        return self.modalias[
            self.modalias.find('dsc')+3:self.modalias.find('dp')]

    def get_device_protocol(self):
        return self.modalias[
            self.modalias.find('dp')+2:self.modalias.find('ic')]

    def get_interface_class(self):
        return self.modalias[
            self.modalias.find('ic')+2:self.modalias.find('isc')]

    def get_interface_subclass(self):
        return self.modalias[
            self.modalias.find('isc')+3:self.modalias.find('ip')]

    def get_interface_protocol(self):
        return self.modalias[self.modalias.find('ip')+2:]

    def compare_to(self, db_device):
        """Checks if db_device is referring to the same hardware device.
        Useful because db_device will also have
        the module attribute available."""
        return db_device.device_vendor in self.device_vendor \
            and db_device.device_product in self.device_product \
            and db_device.bcdevice in self.bcdevice \
            and db_device.device_class in self.device_class \
            and db_device.device_subclass in self.device_subclass \
            and db_device.device_protocol in self.device_protocol \
            and db_device.interface_class in self.interface_class \
            and db_device.interface_subclass in self.interface_subclass \
            and db_device.interface_protocol in self.interface_protocol


class SCSIDevice(Device):
    def __init__(self, modalias, module=''):
        self.modalias = modalias.replace('*','')
        self.module = module

    def compare_to(self, db_device):
        """Checks if db_device is referring to the same hardware device.
        Useful because db_device will also have
        the module attribute available."""
        return db_device.modalias in self.modalias


class KernelOptionsGenerator:
    """Generates kernel options needed for the system."""
    def __init__(self):
        self.pci_device_options = self.get_pci_device_options()
        self.usb_device_options = self.get_usb_device_options()
        self.scsi_device_options = self.get_scsi_device_options()
        self.file_system_options = self.get_file_system_options()

    def get_all_options_string(self):
        all_options = \
              self.pci_device_options \
            | self.usb_device_options \
            | self.scsi_device_options \
            | self.file_system_options
        return ' '.join(all_options)

    def get_pci_device_options(self):
        """Returns a set of PCI device kernel options
        needed for this system."""
        sys_pci_devices = self.get_sys_pci_devices()
        pci_devices_database = self.get_pci_devices_database()
        return self.get_options_from_db(sys_pci_devices, pci_devices_database)

    def get_sys_pci_devices(self):
        sys_pci_lines = self.read_modalias('/sys/bus/pci/devices/*/modalias')
        return {PCIDevice(line) for line in sys_pci_lines if line}

    def read_modalias(self, path):
        lines = set()
        for file_name in glob.glob(path):
            with open(file_name, 'r', encoding='utf-8') as file:
                lines.update(file.read().splitlines())
        return lines

    def get_pci_devices_database(self):
        pci_devices_database = set()
        path = '/usr/share/kergen/modules.alias'
        with open(path, 'r', encoding='utf-8') as module_alias:
            for line in module_alias:
                if self.is_pci_modalias_line(line):
                    pci_device = self.get_pci_device_from_modules_alias(line)
                    pci_devices_database.add(pci_device)
        return pci_devices_database

    def is_pci_modalias_line(self, line):
        return line[6:10] == 'pci:'

    def get_pci_device_from_modules_alias(self, line):
        modalias = line[6:line.rfind(' ')]
        module = line[line.rfind(' ')+1:-1]
        return PCIDevice(modalias, module)

    def get_options_from_db(self, sys_devices, devices_database):
        options = set()
        for sys_device in sys_devices:
            options.update(sys_device.get_options_from_db(devices_database))
        return options

    def get_usb_device_options(self):
        """Returns a set of USB device kernel options
        needed for this system."""
        sys_usb_devices = self.get_sys_usb_devices()
        usb_devices_database = self.get_usb_devices_database()
        return self.get_options_from_db(sys_usb_devices, usb_devices_database)

    def get_sys_usb_devices(self):
        sys_usb_lines = self.read_modalias('/sys/bus/usb/devices/*/modalias')
        return {USBDevice(line) for line in sys_usb_lines if line}

    def get_usb_devices_database(self):
        usb_devices_database = set()
        path = '/usr/share/kergen/modules.alias'
        with open(path, 'r', encoding='utf-8') as modules_alias:
            for line in modules_alias:
                if self.is_usb_modalias_line(line):
                    usb_device = self.get_usb_device_from_modules_alias(line)
                    usb_devices_database.add(usb_device)
        return usb_devices_database

    def is_usb_modalias_line(self, line):
        return line[6:10] == 'usb:'

    def get_usb_device_from_modules_alias(self, line):
        modalias = line[6:line.rfind(' ')]
        module = line[line.rfind(' ')+1:-1]
        return USBDevice(modalias, module)

    def get_scsi_device_options(self):
        """Returns a set of SCSI device kernel options
        needed for this system."""
        sys_scsi_devices = self.get_sys_scsi_devices()
        scsi_devices_database = self.get_scsi_devices_database()
        return self.get_options_from_db(
            sys_scsi_devices, scsi_devices_database)

    def get_sys_scsi_devices(self):
        sys_scsi_lines = self.read_modalias('/sys/block/*/device/modalias')
        return {SCSIDevice(line) for line in sys_scsi_lines if line}

    def get_scsi_devices_database(self):
        scsi_devices_database = set()
        path = '/usr/share/kergen/modules.alias'
        with open(path, 'r', encoding='utf-8') as modules_alias:
            for line in modules_alias:
                if self.is_scsi_modalias_line(line):
                    scsi_device = self.get_scsi_device_from_modules_alias(line)
                    scsi_devices_database.add(scsi_device)
        return scsi_devices_database

    def is_scsi_modalias_line(self, line):
        return line[6:11] == 'scsi:'

    def get_scsi_device_from_modules_alias(self, line):
        modalias = line[6:line.rfind(' ')]
        module = line[line.rfind(' ')+1:-1]
        return SCSIDevice(modalias, module)

    def get_file_system_options(self):
        """Returns a set of file system device kernel options
        needed for this system."""
        with open('/proc/mounts') as proc_mounts:
            return self.get_mounted_fs_options(proc_mounts)

    def get_mounted_fs_options(self, proc_mounts):
        possible_file_systems = self.get_possible_filesystems()
        mounted_fs_info = proc_mounts.read()
        mounted_fs_options = {
            filesystem + '_FS' \
            for filesystem in possible_file_systems \
            if ' ' + filesystem.lower() + ' ' in mounted_fs_info}
        return mounted_fs_options

    def get_possible_filesystems(self, kconfig_path='fs/Kconfig'):
        kconfig_full_path = '/usr/src/linux/' + kconfig_path
        with open(kconfig_full_path, 'r', encoding='utf-8') as kconfig:
            return self.get_kconfig_options(kconfig)
        return set()

    def get_kconfig_options(self, kconfig):
        kconfig_options = set()
        for line in kconfig:
            if self.is_kconfig_path(line):
                sub_kconfig_path = self.get_sub_kconfig_path(line)
                kconfig_options.update(
                    self.get_possible_filesystems(sub_kconfig_path))
            elif self.is_file_system_option(line):
                option = self.get_file_system_option(line)
                kconfig_options.add(option)
        return kconfig_options

    def is_kconfig_path(self, line):
        return line[:7] == 'source '

    def get_sub_kconfig_path(self, line):
        return line[7:-1].strip('"')

    def is_file_system_option(self, line):
        return line[:7] == 'config ' and line[-4:-1] == '_FS'

    def get_file_system_option(self, line):
        return line[7:-4]


if __name__ == '__main__':
    kernel_options_generator = KernelOptionsGenerator()
    all_options_string = kernel_options_generator.get_all_options_string()
    print(all_options_string)